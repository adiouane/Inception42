# MySQL Configuration
MYSQL_ROOT_PASSWORD=rootpassword
MYSQL_DATABASE=wordpress
MYSQL_USER=adiouane
MYSQL_PASSWORD=adiouane123

# Database Host
DB_HOST=mariadb

# WordPress Configuration
WP_URL=adiouane.42.fr
WP_TITLE=adiouane
WP_ADMIN_EMAIL=adiouane@gmail.com


# concepts related to environment variables and their usage in the context of Docker and the `.env` file:

# 1. **Environment Variables**: Environment variables are dynamic values that can affect the behavior of programs and applications. They are key-value pairs that are set within the operating system's environment and can be accessed by running processes. In the context of Docker, environment variables can be used to provide configuration and runtime information to containers.

# 2. **Configuration Management**: Environment variables are commonly used for configuration management. Instead of hard-coding values directly into the application code or Docker Compose file, environment variables offer a more flexible and configurable approach. By externalizing configuration through environment variables, you can modify settings without modifying the code or re-building containers.

# 3. **Separation of Concerns**: Environment variables enable a clear separation of configuration from application code. By using environment variables, you can keep sensitive or environment-specific information (such as passwords, database names, API keys, etc.) separate from the codebase. This separation promotes security and allows for easier customization and portability across different environments.

# 4. **`.env` File**: The `.env` file is a text file that contains environment variable definitions. It provides a convenient way to manage and load environment variables into the environment when using tools like Docker Compose. Each line in the file represents an environment variable assignment in the format of `KEY=VALUE`.

# 5. **`.env` File Usage**: Docker Compose allows you to specify an `.env` file using the `env_file` directive within the Compose file. When the Compose file is processed, the values defined in the `.env` file are loaded as environment variables for the services defined in the Compose file. This allows for centralized management and easy sharing of environment variable values across multiple services.

# 6. **Sensitive Information**: Environment variables are particularly useful for managing sensitive information, such as passwords or access tokens. By loading sensitive information from an `.env` file, you can avoid exposing this information in plain text within the Compose file or the application codebase. It is essential to ensure the security and proper management of the `.env` file, such as restricting access to it and avoiding storing it in version control systems.

# 7. **Referencing Environment Variables**: Once environment variables are defined in the `.env` file and loaded into the container environment, they can be accessed by the application within the container. For example, in a Docker Compose file, you can reference environment variables using the syntax `${VARIABLE_NAME}`. This allows you to dynamically configure services based on the values provided by the environment variables.

# Using environment variables and the `.env` file helps in maintaining flexibility, portability, and security in your Docker-based applications by decoupling configuration from the codebase and providing a centralized way to manage settings across different environments.